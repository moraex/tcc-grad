library(mixKernel)
library(PCAmixdata)
# reticulate::py_config()
# repl_python()
reticulate::use_python("C:/Users/ARQ/AppData/Local/Programs/Python/Python39", required = TRUE)
setwd("C:/Users/ARQ/Desktop/GRADUACAO/12_SEMESTRE/TCC/esperimentos")
base.location <- "./raw_datasets/"
trainset.name <- "expr_FUN"
path.trainset.name <- paste(base.location,trainset.name,'/',trainset.name,'.trainvalid.temp.arff', sep= "")
trainset <- farff::readARFF(path.trainset.name)
# removendo coluna de classificacao = unsupervisionado
D <- trainset[,-ncol(trainset)]
D.numerical <- splitmix(D)$X.quanti
D.categorical <- splitmix(D)$X.quali
encode_ordinal <- function(x, order = unique(x)) {
x <- as.numeric(factor(x, levels = order, exclude = NULL))
x
}
for(e in names(D.categorical)){
D.categorical[[e]] <- encode_ordinal(D.categorical[[e]])
}
DS <- cbind(D.numerical, D.categorical)
# Substituir os valores faltantes pela mÃ©dia do attr
for(i in 1:ncol(DS)){
DS[is.na(DS[,i]), i] <- mean(DS[,i], na.rm=T)
}
feats <- select.features(DS,  kx.func = "bray", method= lambda = 1, keepX = 40, nstep = 1)
feats <- select.features(DS,  kx.func = "bray", method="kernel", lambda = 1, keepX = 40, nstep = 1)
